# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*' # 当 Git tag 以 'v' 开头时触发 (e.g., v1.0.0, v1.2.3)
  workflow_dispatch: # 允许手动从 GitHub UI 触发此工作流

jobs:
  build-and-release:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 运行器上执行编译和发布

    steps:
    - name: 检出代码 # Step 1: Checkout the repository code
      uses: actions/checkout@v4

    - name: 设置 Go 环境 # Step 2: Set up Go language environment
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5' # Specify Go version, adjust as needed

    - name: 设置 Go 模块缓存 # Step 3: Set up Go module cache for faster builds
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 整理 Go 模块依赖 # Step 4: Tidy and verify Go module dependencies
      run: go mod tidy

    - name: 获取发布版本号 # Step 5: Get the release version/tag from the Git ref
      id: get_release_version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      # This extracts "v1.0.0" from "refs/tags/v1.0.0"

    - name: 编译所有平台二进制文件 # Step 6: Build all platform binaries using Makefile
      run: make build-all # Calls the 'build-all' target in your Makefile
      env:
        # Pass the extracted tag version to the Makefile's VERSION variable
        # This ensures the binary's internal version matches the release tag.
        VERSION: ${{ env.RELEASE_VERSION }} 

    - name: 创建 GitHub Release # Step 7: Create a new GitHub Release and upload assets
      uses: softprops/action-gh-release@v2 # 使用 softprops/action-gh-release action
      if: startsWith(github.ref, 'refs/tags/') # 确保只有在标签推送时才创建 Release
      with:
        tag_name: ${{ github.ref_name }} # Release 的标签名称，例如 v1.0.0
        name: 发布 ${{ github.ref_name }} # Release 的标题
        body: | # Release 的描述内容
          这是针对版本 `${{ github.ref_name }}` 的发布。
          由 GitHub Actions 自动构建。
          
          **包含的二进制文件:**
          - Linux AMD64
          - Linux ARM64
          - Windows AMD64
          - macOS Intel AMD64
          - macOS Apple Silicon ARM64
        draft: false # 设置为 false 表示直接发布，true 表示创建草稿 Release
        prerelease: false # 设置为 false 表示正式发布，true 表示预发布 Release
        files: | # 要上传到 Release 的文件列表
          k8s-backup-linux-amd64
          k8s-backup-linux-arm64
          k8s-backup-windows-amd64.exe
          k8s-backup-darwin-amd64
          k8s-backup-darwin-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 提供的自动认证 token，用于授权创建 Release
